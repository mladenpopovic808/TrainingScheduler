version: "3"

services:
  eureka:
    image: eureka
    build:
      context: ${BACKEND_REPO_ABSOLUTE_PATH}/EurekaService/
      dockerfile: ${INFRA_REPO_ABSOLUTE_PATH}/images/eureka.Dockerfile
    networks:
      - user-service-network
    ports:
      - "8761:8761"
    restart: on-failure
    depends_on:
      - database

  api-gateway:
    image: api-gateway
    build:
      context: ${BACKEND_REPO_ABSOLUTE_PATH}/ApiGatewayService/
      dockerfile: ${INFRA_REPO_ABSOLUTE_PATH}/images/api-gateway.Dockerfile
    networks:
      - user-service-network
    ports:
      - "8084:8084"
    restart: on-failure
    depends_on:
      - eureka

  database:
    image: mysql:latest
    environment:
       MYSQL_DATABASE: gym_schema       # Kreira se baza sa ovim imenom             
       MYSQL_PASSWORD: root             # Lozinka za korisnika
       MYSQL_ROOT_PASSWORD: root        # Lozinka za root korisnika (administratora)
    networks:
      - user-service-network
    ports:
     - "3306:3306"  # Mapa portova izmeÄ‘u hosta i kontejnera (MySQL koristi port 3306)


  user-service:
  #Odredjuje ime containera, nalazicete su folderu services (Ako nema, kreirace)
    build:
      context: C:/Users/user/Desktop/TrainingScheduler/Backend/UserService/
      dockerfile: ${INFRA_REPO_ABSOLUTE_PATH}/images/user-service.Dockerfile
    image: user-service
    networks:
    #Servisi treba da budu u istoj mrezi kako bi komunicirali. Ove mreze sluze da zaokruze neke celine servisa.
      - user-service-network
    restart: on-failure
    ports:
      - "8080:8080"
      - "61616:61616"     # Mapira ActiveMQ port
    depends_on:
      - api-gateway
      - angular-frontend
      
    #Prvo ce pokrenuti database, pa onda ovaj servis


  # schedule-service:
  #   image: email-service
  #   build:
  #     context: ${BACKEND_REPO_ABSOLUTE_PATH}/ScheduleService/
  #     dockerfile: ${INFRA_REPO_ABSOLUTE_PATH}/images/schedule-service.Dockerfile
  #   networks:
  #     - user-service-network
  #   ports:
  #     - "8081:8081"
  #   restart: on-failure
  #   depends_on:
  #     - user-service
      
    
  notification-service:
    image: services/notification-service
    build:
      context: ${BACKEND_REPO_ABSOLUTE_PATH}/notificationService/
      dockerfile: ${INFRA_REPO_ABSOLUTE_PATH}/images/notification-service.Dockerfile
    networks:
      - user-service-network
    ports:
      - "8082:8082"
    restart: on-failure
    depends_on:
      - api-gateway
      


  angular-frontend:
   image: angular-frontend
   build:
     context: ${FRONTEND_REPO_ABSOLUTE_PATH}/
     dockerfile: ${INFRA_REPO_ABSOLUTE_PATH}/images/frontend.Dockerfile
   ports:
     - "4200:4200"
   networks:
     - user-service-network
      
 # volumes:
  #Sta je ovo
  #Sta je ovo
  #Sta je ovo
  #Sta je ovo
  #Sta je ovo
  #Sta je ovo
  #Sta je ovo
   # - ${INFRA_REPO_ABSOLUTE_PATH}/init:/docker-entrypoint-initdb.d  # SQL skripte za inicijalizaciju baze
  


  # redis:
  #   image: redis:latest
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - user-service-network
  #   volumes:
  #     - redis_data:/data


networks:
  user-service-network:

volumes:
  database_data:
  redis_data:
  mongo_data:
